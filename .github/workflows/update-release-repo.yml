name: Update Release Repo on New Release

on:
  repository_dispatch:
    types: [new-release]
  workflow_dispatch:
    inputs:
      repository_name:
        description: 'Repository name that released'
        required: true
      release_tag:
        description: 'Release tag'
        required: true

jobs:
  update-submodule:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout release-repo
        uses: actions/checkout@v4
        with:
          repository: Keyla-TTT/Keyla-RELEASE
          token: ${{ secrets.PAT_TOKEN }}
          submodules: true

      - name: Update submodule to new release tag
        run: |
          REPO_NAME="${{ github.event.client_payload.repository_name || github.event.inputs.repository_name }}"
          TAG_NAME="${{ github.event.client_payload.release_tag || github.event.inputs.release_tag }}"
          
          echo "Updating repository: $REPO_NAME to version: $TAG_NAME"
          
          # Verify existing directories
          echo "Directory disponibili:"
          ls -la
          
          # Create assets directory
          mkdir -p ./release-assets
          
          # Update the specified submodule
          if [ "$REPO_NAME" = "Keyla-API" ] && [ -d "Keyla-API" ]; then
            cd "Keyla-API"
            git fetch --tags
            git checkout "$TAG_NAME"
            cd ..
          elif [ "$REPO_NAME" = "Keyla-CLI" ] && [ -d "Keyla-CLI" ]; then
            cd "Keyla-CLI"
            git fetch --tags
            git checkout "$TAG_NAME"
            cd ..
          else
            echo "Error: Directory $REPO_NAME not found"
            exit 1
          fi

      - name: Commit and push changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update $REPO_NAME to $TAG_NAME"
            git push
          fi

      - name: Setup build tools
        run: |
          # Setup Java/Scala
          java -version
          
          # Setup SBT se necessario
          echo "deb https://repo.scala-sbt.org/scalasbt/debian all main" | sudo tee /etc/apt/sources.list.d/sbt.list
          curl -sL "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2EE0EA64E40A89B84B2DF73499E82A75642AC823" | sudo apt-key add
          sudo apt-get update
          sudo apt-get install -y sbt

          # Install dependencies for Kotlin/Native
          sudo apt-get install -y libcurl4-openssl-dev zlib1g-dev

      - name: Build assets if needed
        run: |
          # Compile Keyla-API if needed
          if [ -d "Keyla-API" ] && [ ! -d "Keyla-API/target/universal" ]; then
            cd Keyla-API
            echo "Compiling of Keyla-API"
            sbt Universal/packageBin
            cd ..
          fi
          
          # Compile Keyla-CLI if needed
              if [ -d "Keyla-CLI" ] && [ ! -d "Keyla-CLI/dist" ] && [ ! -d "Keyla-CLI/build/bin" ]; then
                cd Keyla-CLI
                echo "Compiling of Keyla-CLI"
          
                echo "Compiling for Linux"  
                ./gradlew linkReleaseExecutableLinuxX64
                echo "Compiling for MacOS"  
                ./gradlew linkReleaseExecutableMacosX64
                echo "Compiling for Windows"  
                ./gradlew linkReleaseExecutableMingwX64
                
                # Create dist directory and copy the native executable
                mkdir -p dist
                if [ "$(uname)" == "Windows_NT" ]; then
                  cp build/bin/mingwX64/releaseExecutable/Keyla.exe dist/keyla-windows.exe
                if [ "$(uname)" == "Darwin" ]; then
                  cp build/bin/macosX64/releaseExecutable/Keyla.kexe dist/keyla-macos
                if
                  cp build/bin/linuxX64/releaseExecutable/Keyla.kexe dist/keyla-linux
                fi
                
                echo "Compiled binaries in dist directory:"
                ls -la dist/ 
          
                cd ..
              fi

      - name: Collect assets from all submodules
        run: |
          # Create directory for the assets
          mkdir -p ./release-assets
          
          # Collecting assets from Keyla-API
          if [ -d "Keyla-API" ]; then
            cd Keyla-API
            echo "Collecting assets from Keyla-API"
            if [ -d "target/universal" ]; then
              echo "Copy ZIP from target/universal"
              cp target/universal/*.zip ../release-assets/ || echo "No ZIP found in target/universal"
            fi
            cd ..
          fi
          
          # Collecting assets from Keyla-CLI
          if [ -d "Keyla-CLI" ]; then
            cd Keyla-CLI
            echo "Collecting assets from Keyla-CLI"
            # For Keyla-CLI the assets are native exe in dist/
            if [ -d "dist" ]; then
              echo "Copy native .exe from dist/"
              cp dist/* ../release-assets/ || echo "No executable found in dist/"
            # Verify if native .exe files are in build/bin
            elif [ -d "build/bin" ]; then
              echo "Searching for native .exe in build/bin"
              # Search for all .exe and .kexe files in build/bin
              find build/bin -name "*.exe" -o -name "*.kexe" | while read file; do
              echo "Found: $file"
              cp "$file" ../release-assets/
              done
            else
              echo "Directory with assets for Keyla-CLI not found"
            fi
            cd ..
          fi
          
          
          echo "Assets collected:"
          ls -la ./release-assets
          echo "Total dimension:"
          du -sh ./release-assets

      - name: Create Release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: release-${{ github.run_number }}
          name: Release ${{ github.run_number }}
          body: |
            Completed Release including:
            - API: https://github.com/Keyla-TTT/Keyla-API/releases
            - CLI: https://github.com/Keyla-TTT/Keyla-CLI/releases
            
            Updated with this release:
            - ${{ github.event.client_payload.repository_name || github.event.inputs.repository_name }}: ${{ github.event.client_payload.release_tag || github.event.inputs.release_tag }}
          token: ${{ secrets.PAT_TOKEN }}
          files: |
            ./release-assets/*