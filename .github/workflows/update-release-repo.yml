name: Update Release Repo on New Release

on:
  repository_dispatch:
    types: [new-release]
  workflow_dispatch:
    inputs:
      api_release_tag:
        description: 'Keyla-API release tag (e.g., v1.6.0). Default is latest.'
        required: false
        default: 'latest'
      cli_release_tag:
        description: 'Keyla-CLI release tag (e.g., v1.2.0). Default is latest.'
        required: false
        default: 'latest'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Resolve Release Tags
        id: tags
        run: |
          API_TAG=""
          CLI_TAG=""

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Manual trigger. Using workflow-inputs."
            API_TAG="${INPUT_API_TAG:-latest}"
            CLI_TAG="${INPUT_CLI_TAG:-latest}"
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "Automatic trigger from repository_dispatch."
            if [ -n "${{ github.event.client_payload.api_release_tag }}" ]; then
              echo "Triggered by Keyla-API release."
              API_TAG="${{ github.event.client_payload.api_release_tag }}"
              echo "Fetching latest Keyla-CLI release tag..."
              CLI_TAG=$(gh release view --repo Keyla-TTT/Keyla-CLI --json tagName -q .tagName)
            elif [ -n "${{ github.event.client_payload.cli_release_tag }}" ]; then
              echo "Triggered by Keyla-CLI release."
              CLI_TAG="${{ github.event.client_payload.cli_release_tag }}"
              echo "Fetching latest Keyla-API release tag..."
              API_TAG=$(gh release view --repo Keyla-TTT/Keyla-API --json tagName -q .tagName)
            fi
          fi

          if [ -z "$API_TAG" ] || [ -z "$CLI_TAG" ]; then
             echo "Error: Could not determine one or both release tags."
             exit 1
          fi

          echo "Final API Tag: $API_TAG"
          echo "Final CLI Tag: $CLI_TAG"
          echo "api_tag=$API_TAG" >> $GITHUB_OUTPUT
          echo "cli_tag=$CLI_TAG" >> $GITHUB_OUTPUT
        env:
          INPUT_API_TAG: ${{ github.event.inputs.api_release_tag }}
          INPUT_CLI_TAG: ${{ github.event.inputs.cli_release_tag }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release assets directory
        run: mkdir -p ./release-assets

      - name: Download Keyla-API Release Asset
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Downloading Keyla-API asset for tag: ${{ steps.tags.outputs.api_tag }}"
          gh release download "${{ steps.tags.outputs.api_tag }}" \
            --repo Keyla-TTT/Keyla-API \
            --pattern "*.zip" \
            --output ./release-assets/keyla-api.zip

      - name: Download Keyla-CLI Release Assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Downloading Keyla-CLI assets for tag: ${{ steps.tags.outputs.cli_tag }}"
          gh release download "${{ steps.tags.outputs.cli_tag }}" \
            --repo Keyla-TTT/Keyla-CLI \
            --pattern "keyla-*" \
            --dir ./release-assets

      - name: List downloaded assets
        run: ls -la ./release-assets

      - name: Prepare Release Tag
        id: prep_tag
        run: |
          API_VERSION=${{ steps.tags.outputs.api_tag }}
          CLI_VERSION=${{ steps.tags.outputs.cli_tag }}
          # Remove 'v' prefix from both tags
          API_NUM=${API_VERSION#v}
          CLI_NUM=${CLI_VERSION#v}
          # Create the new tag as v<api_version>.<cli_version>
          NEW_TAG="v${API_NUM}.${CLI_NUM}"
          echo "release_tag=${NEW_TAG}" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/keyla-release:${{ steps.prep_tag.outputs.release_tag }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.prep_tag.outputs.release_tag }}
          name: Release ${{ steps.prep_tag.outputs.release_tag }}
          body: |
            Docker Release based on:
            - API Tag: ${{ steps.tags.outputs.api_tag }}
            - CLI Tag: ${{ steps.tags.outputs.cli_tag }}

            Docker image available on Docker Hub:
            - `${{ secrets.DOCKERHUB_USERNAME }}/keyla-release:${{ steps.prep_tag.outputs.release_tag }}`
          token: ${{ secrets.PAT_TOKEN }}